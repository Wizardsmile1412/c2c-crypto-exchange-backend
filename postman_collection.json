{
  "info": {
    "_postman_id": "828beb9b-1bf2-4876-aebb-2c4a4cbdb495",
    "name": "C2C Crypto Exchange API",
    "description": "Testing collection for crypto exchange backend",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "43388699"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      },
      "response": []
    },
    {
      "name": "Register User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/register",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "register"]
        }
      },
      "response": []
    },
    {
      "name": "Register Second User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser2\",\n  \"email\": \"test2@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/register",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "register"]
        }
      },
      "response": []
    },
    {
      "name": "Login User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (responseCode.code === 200) {",
              "    var jsonData = JSON.parse(responseBody);",
              "    if (jsonData.success && jsonData.data.token) {",
              "        pm.environment.set(\"token\", jsonData.data.token);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/login",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "login"]
        }
      },
      "response": []
    },
    {
      "name": "Get All Wallets",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/wallets/",
          "host": ["{{base_url}}"],
          "path": ["api", "wallets", ""]
        }
      },
      "response": []
    },
    {
      "name": "Get Wallet Summary",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/wallets/summary",
          "host": ["{{base_url}}"],
          "path": ["api", "wallets", "summary"]
        }
      },
      "response": []
    },
    {
      "name": "Get BTC Wallet",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/wallets/BTC",
          "host": ["{{base_url}}"],
          "path": ["api", "wallets", "BTC"]
        }
      },
      "response": []
    },
    {
      "name": "Search Users for Transfer",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/transfer/search-users?query=test2@example.com",
          "host": ["{{base_url}}"],
          "path": ["api", "transfer", "search-users"],
          "query": [
            {
              "key": "query",
              "value": "test2@example.com"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Transfer BTC by Email",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"recipient\": \"test2@example.com\",\n  \"currency\": \"BTC\",\n  \"amount\": \"0.001\",\n  \"note\": \"Test transfer of Bitcoin\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/transfer",
          "host": ["{{base_url}}"],
          "path": ["api", "transfer"]
        }
      },
      "response": []
    },
    {
      "name": "Transfer THB by Username",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"recipient\": \"testuser2\",\n  \"currency\": \"THB\",\n  \"amount\": \"1000\",\n  \"note\": \"Test transfer of Thai Baht\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/transfer",
          "host": ["{{base_url}}"],
          "path": ["api", "transfer"]
        }
      },
      "response": []
    },
    {
      "name": "Transfer ETH by User ID",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"recipient\": \"2\",\n  \"currency\": \"ETH\",\n  \"amount\": \"0.1\",\n  \"note\": \"Test transfer of Ethereum\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/transfer",
          "host": ["{{base_url}}"],
          "path": ["api", "transfer"]
        }
      },
      "response": []
    },
    {
      "name": "Transfer with Insufficient Balance",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"recipient\": \"test2@example.com\",\n  \"currency\": \"BTC\",\n  \"amount\": \"999\",\n  \"note\": \"This should fail - insufficient balance\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/transfer",
          "host": ["{{base_url}}"],
          "path": ["api", "transfer"]
        }
      },
      "response": []
    },
    {
      "name": "Transfer to Self (Should Fail)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"recipient\": \"test@example.com\",\n  \"currency\": \"BTC\",\n  \"amount\": \"0.001\",\n  \"note\": \"This should fail - self transfer\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/transfer",
          "host": ["{{base_url}}"],
          "path": ["api", "transfer"]
        }
      },
      "response": []
    },
    {
      "name": "Get Transfer History",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/transfer/history",
          "host": ["{{base_url}}"],
          "path": ["api", "transfer", "history"]
        }
      },
      "response": []
    },
    {
      "name": "Get Transfer History - BTC Only",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/transfer/history?currency=BTC&limit=5",
          "host": ["{{base_url}}"],
          "path": ["api", "transfer", "history"],
          "query": [
            {
              "key": "currency",
              "value": "BTC"
            },
            {
              "key": "limit",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Exchange Rate Tests",
      "item": [
        {
          "name": "Initialize Default Exchange Rates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Default rates were created\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.count).to.be.above(0);",
                  "    pm.expect(jsonData.message).to.include('initialized');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/exchange/rates/initialize",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "rates", "initialize"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Exchange Rates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains exchange rates\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.count).to.be.above(0);",
                  "});",
                  "",
                  "pm.test(\"Each rate has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        const rate = jsonData.data[0];",
                  "        pm.expect(rate).to.have.property('base_currency');",
                  "        pm.expect(rate).to.have.property('quote_currency');",
                  "        pm.expect(rate).to.have.property('rate');",
                  "        pm.expect(rate).to.have.property('provider');",
                  "        pm.expect(rate).to.have.property('is_active');",
                  "        pm.expect(rate).to.have.property('last_updated');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/rates",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "rates"]
            }
          },
          "response": []
        },
        {
          "name": "Get Specific Exchange Rate - BTC/THB",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains BTC/THB rate\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.data.base_currency).to.equal('BTC');",
                  "    pm.expect(jsonData.data.quote_currency).to.equal('THB');",
                  "    pm.expect(jsonData.data.rate).to.be.above(0);",
                  "});",
                  "",
                  "pm.test(\"Rate is active\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.is_active).to.be.true;",
                  "});",
                  "",
                  "// Store rate for conversion test",
                  "pm.test(\"Store BTC/THB rate\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"btc_thb_rate\", jsonData.data.rate);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/rates/BTC/THB",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "rates", "BTC", "THB"]
            }
          },
          "response": []
        },
        {
          "name": "Get Specific Exchange Rate - ETH/USD",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains ETH/USD rate\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.base_currency).to.equal('ETH');",
                  "    pm.expect(jsonData.data.quote_currency).to.equal('USD');",
                  "    pm.expect(jsonData.data.rate).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/rates/ETH/USD",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "rates", "ETH", "USD"]
            }
          },
          "response": []
        },
        {
          "name": "Get Non-existent Exchange Rate (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 (rate not found)\", function () {",
                  "    pm.response.to.have.status(500);",
                  "});",
                  "",
                  "pm.test(\"Response indicates error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error).to.include('not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/rates/INVALID/CURRENCY",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "rates", "INVALID", "CURRENCY"]
            }
          },
          "response": []
        },
        {
          "name": "Convert Currency - 1 BTC to THB",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Conversion result is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.data.amount).to.equal(1);",
                  "    pm.expect(jsonData.data.fromCurrency).to.equal('BTC');",
                  "    pm.expect(jsonData.data.toCurrency).to.equal('THB');",
                  "    pm.expect(jsonData.data.convertedAmount).to.be.above(0);",
                  "    pm.expect(jsonData.data.rate).to.be.above(0);",
                  "});",
                  "",
                  "pm.test(\"Conversion math is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const expectedAmount = jsonData.data.amount * jsonData.data.rate;",
                  "    pm.expect(jsonData.data.convertedAmount).to.equal(expectedAmount);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/convert?amount=1&from=BTC&to=THB",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "convert"],
              "query": [
                {
                  "key": "amount",
                  "value": "1"
                },
                {
                  "key": "from",
                  "value": "BTC"
                },
                {
                  "key": "to",
                  "value": "THB"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Convert Currency - 0.5 ETH to USD",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Conversion result is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.amount).to.equal(0.5);",
                  "    pm.expect(jsonData.data.fromCurrency).to.equal('ETH');",
                  "    pm.expect(jsonData.data.toCurrency).to.equal('USD');",
                  "    pm.expect(jsonData.data.convertedAmount).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/convert?amount=0.5&from=ETH&to=USD",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "convert"],
              "query": [
                {
                  "key": "amount",
                  "value": "0.5"
                },
                {
                  "key": "from",
                  "value": "ETH"
                },
                {
                  "key": "to",
                  "value": "USD"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Convert Same Currency (Should Return Same Amount)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Same currency conversion returns same amount\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.amount).to.equal(100);",
                  "    pm.expect(jsonData.data.convertedAmount).to.equal(100);",
                  "    pm.expect(jsonData.data.rate).to.equal(1);",
                  "    pm.expect(jsonData.data.fromCurrency).to.equal('THB');",
                  "    pm.expect(jsonData.data.toCurrency).to.equal('THB');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/convert?amount=100&from=THB&to=THB",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "convert"],
              "query": [
                {
                  "key": "amount",
                  "value": "100"
                },
                {
                  "key": "from",
                  "value": "THB"
                },
                {
                  "key": "to",
                  "value": "THB"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Convert with Invalid Parameters (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 (bad request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates missing parameters\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error).to.include('required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/convert?amount=100",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "convert"],
              "query": [
                {
                  "key": "amount",
                  "value": "100"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Trading Pairs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains trading pairs\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.count).to.be.above(0);",
                  "});",
                  "",
                  "pm.test(\"Each pair has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        const pair = jsonData.data[0];",
                  "        pm.expect(pair).to.have.property('base_currency');",
                  "        pm.expect(pair).to.have.property('quote_currency');",
                  "        pm.expect(pair).to.have.property('rate');",
                  "        pm.expect(pair).to.have.property('pair');",
                  "        pm.expect(pair).to.have.property('provider');",
                  "        pm.expect(pair).to.have.property('last_updated');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Contains BTC/THB pair\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const btcThbPair = jsonData.data.find(pair => pair.pair === 'BTC/THB');",
                  "    pm.expect(btcThbPair).to.not.be.undefined;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/pairs",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "pairs"]
            }
          },
          "response": []
        },
        {
          "name": "Get Market Prices",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains market prices\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Contains BTC prices\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('BTC');",
                  "    pm.expect(jsonData.data.BTC).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"BTC has THB rate\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.BTC) {",
                  "        pm.expect(jsonData.data.BTC).to.have.property('THB');",
                  "        pm.expect(jsonData.data.BTC.THB).to.have.property('rate');",
                  "        pm.expect(jsonData.data.BTC.THB.rate).to.be.above(0);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exchange/prices",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "prices"]
            }
          },
          "response": []
        },
        {
          "name": "Get Portfolio Value (Protected)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains portfolio valuation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.data).to.have.property('targetCurrency');",
                  "    pm.expect(jsonData.data).to.have.property('totalValue');",
                  "    pm.expect(jsonData.data).to.have.property('breakdown');",
                  "});",
                  "",
                  "pm.test(\"Total value is a number\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.totalValue).to.be.a('number');",
                  "    pm.expect(jsonData.data.totalValue).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test(\"Breakdown is an object\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.breakdown).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/exchange/portfolio-value?targetCurrency=THB",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "portfolio-value"],
              "query": [
                {
                  "key": "targetCurrency",
                  "value": "THB"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Portfolio Value in USD",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Target currency is USD\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.targetCurrency).to.equal('USD');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/exchange/portfolio-value?targetCurrency=USD",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "portfolio-value"],
              "query": [
                {
                  "key": "targetCurrency",
                  "value": "USD"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Exchange Rate Manually (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Rate was updated successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});",
                  "",
                  "pm.test(\"Updated rate has correct values\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.base_currency).to.equal('BTC');",
                  "    pm.expect(jsonData.data.quote_currency).to.equal('THB');",
                  "    pm.expect(jsonData.data.rate).to.equal('1600000.00000000');",
                  "    pm.expect(jsonData.data.provider).to.equal('MANUAL');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"baseCurrency\": \"BTC\",\n  \"quoteCurrency\": \"THB\",\n  \"rate\": 1600000,\n  \"provider\": \"MANUAL\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/exchange/rates",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "rates"]
            }
          },
          "response": []
        },
        {
          "name": "Update Exchange Rate with Invalid Data (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 (bad request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates missing required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error).to.include('required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"baseCurrency\": \"BTC\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/exchange/rates",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "rates"]
            }
          },
          "response": []
        },
        {
          "name": "Fetch External Rates from CoinGecko (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"External rates fetched successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.message).to.include('fetched');",
                  "});",
                  "",
                  "pm.test(\"Fetched rates have COINGECKO provider\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        const rate = jsonData.data[0];",
                  "        pm.expect(rate.provider).to.equal('COINGECKO');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/exchange/rates/fetch",
              "host": ["{{base_url}}"],
              "path": ["api", "exchange", "rates", "fetch"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create BUY Order - BTC/THB",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"orderType\": \"BUY\",\n  \"currency\": \"BTC\",\n  \"fiatCurrency\": \"THB\",\n  \"amount\": \"0.1\",\n  \"pricePerUnit\": \"1500000\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/orders",
          "host": ["{{base_url}}"],
          "path": ["api", "orders"]
        }
      },
      "response": []
    },
    {
      "name": "Create SELL Order - ETH/USD",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"orderType\": \"SELL\",\n  \"currency\": \"ETH\",\n  \"fiatCurrency\": \"USD\",\n  \"amount\": \"1.0\",\n  \"pricePerUnit\": \"2500\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/orders",
          "host": ["{{base_url}}"],
          "path": ["api", "orders"]
        }
      },
      "response": []
    },
    {
      "name": "Create BUY Order - DOGE/THB",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"orderType\": \"BUY\",\n  \"currency\": \"DOGE\",\n  \"fiatCurrency\": \"THB\",\n  \"amount\": \"1000\",\n  \"pricePerUnit\": \"15\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/orders",
          "host": ["{{base_url}}"],
          "path": ["api", "orders"]
        }
      },
      "response": []
    },
    {
      "name": "Create Order with Insufficient Balance",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"orderType\": \"BUY\",\n  \"currency\": \"BTC\",\n  \"fiatCurrency\": \"THB\",\n  \"amount\": \"10\",\n  \"pricePerUnit\": \"10000000\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/orders",
          "host": ["{{base_url}}"],
          "path": ["api", "orders"]
        }
      },
      "response": []
    },
    {
      "name": "Get All User Orders",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/orders",
          "host": ["{{base_url}}"],
          "path": ["api", "orders"]
        }
      },
      "response": []
    },
    {
      "name": "Get User Orders - BUY Only",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/orders?orderType=BUY&currency=BTC",
          "host": ["{{base_url}}"],
          "path": ["api", "orders"],
          "query": [
            {
              "key": "orderType",
              "value": "BUY"
            },
            {
              "key": "currency",
              "value": "BTC"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get User Orders - OPEN Status",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/orders?status=OPEN&limit=10",
          "host": ["{{base_url}}"],
          "path": ["api", "orders"],
          "query": [
            {
              "key": "status",
              "value": "OPEN"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Market Orders - All",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/orders/market",
          "host": ["{{base_url}}"],
          "path": ["api", "orders", "market"]
        }
      },
      "response": []
    },
    {
      "name": "Get Market Orders - BTC/THB",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/orders/market?currency=BTC&fiatCurrency=THB",
          "host": ["{{base_url}}"],
          "path": ["api", "orders", "market"],
          "query": [
            {
              "key": "currency",
              "value": "BTC"
            },
            {
              "key": "fiatCurrency",
              "value": "THB"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Market Orders - BUY Orders Only",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/orders/market?orderType=BUY",
          "host": ["{{base_url}}"],
          "path": ["api", "orders", "market"],
          "query": [
            {
              "key": "orderType",
              "value": "BUY"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Order By ID",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/orders/1",
          "host": ["{{base_url}}"],
          "path": ["api", "orders", "1"]
        }
      },
      "response": []
    },
    {
      "name": "Cancel Order",
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/orders/1/cancel",
          "host": ["{{base_url}}"],
          "path": ["api", "orders", "1", "cancel"]
        }
      },
      "response": []
    },
    {
      "name": "Create BUY Order - Auto Match",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"orderType\": \"BUY\",\n  \"currency\": \"BTC\",\n  \"fiatCurrency\": \"THB\",\n  \"amount\": \"0.1\",\n  \"pricePerUnit\": \"1600000\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/orders",
          "host": ["{{base_url}}"],
          "path": ["api", "orders"]
        }
      },
      "response": []
    },
    {
      "name": "Get User Trade History",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/matches/trades",
          "host": ["{{base_url}}"],
          "path": ["api", "matches", "trades"]
        }
      },
      "response": []
    },
    {
      "name": "Get Market Stats - BTC/THB",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/matches/market-stats?currency=BTC&fiatCurrency=THB",
          "host": ["{{base_url}}"],
          "path": ["api", "matches", "market-stats"],
          "query": [
            {
              "key": "currency",
              "value": "BTC"
            },
            {
              "key": "fiatCurrency",
              "value": "THB"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Recent Trades - BTC/THB",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/matches/recent?currency=BTC&fiatCurrency=THB&limit=10",
          "host": ["{{base_url}}"],
          "path": ["api", "matches", "recent"],
          "query": [
            {
              "key": "currency",
              "value": "BTC"
            },
            {
              "key": "fiatCurrency",
              "value": "THB"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Logout",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/auth/logout",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "logout"]
        }
      },
      "response": []
    }
  ]
}